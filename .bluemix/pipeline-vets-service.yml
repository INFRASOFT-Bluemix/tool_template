---
stages:
- name: Build
  inputs:
  - type: git
    branch: master
    service: ${SERVICE_API_REPO}
  triggers:
  - type: commit
  jobs:
  - name: Package-vets-service
    type: builder
    working_dir: spring-petclinic-vets-service
    artifact_dir: target
    build_type: maven
    script: |-
      #!/bin/bash
      export JAVA_HOME=$JAVA8_HOME
      
      mvn -B package

      cp ./src/main/docker/Dockerfile $ARCHIVE_DIR
- name: Test
  inputs:
  - type: job
    stage: Build
    job: Package-vets-service
    dir_name: null
  triggers:
  - type: stage
  jobs:
  - name: Static Analystics
    type: tester
    script: |-
      #!/bin/bash

      CLASS=org.springframework.samples.petclinic
      TARGET=spring-petclinic-vets-service-1.5.2.jar

      git clone https://github.com/jgkong/findbugs_extension.git

      export JAVA_HOME=$JAVA8_HOME
      export PATH=$JAVA_HOME/bin:$PATH

      export EXT_DIR=$(pwd)/findbugs_extension

      FINDBUGS_TGZ=$EXT_DIR/lib/findbugs-noUpdateChecks-3.0.1.tar.gz
      FINDBUGS_PREFIX='findbugs'
      FINDBUGS_XML='findbugs_report.xml'
      mkdir -p $FINDBUGS_PREFIX
      tar xz -C $FINDBUGS_PREFIX -f $FINDBUGS_TGZ
      FINDBUGS_DIR=$(pwd)/$(ls -d $FINDBUGS_PREFIX/findbugs*)

      $FINDBUGS_DIR/bin/findbugs -xml:withMessages -output $FINDBUGS_XML -onlyAnalyze ${CLASS}.- ${TARGET}
      mkdir -p tests
      python $EXT_DIR/findbug_to_junit.py $FINDBUGS_XML tests/TEST-findbugs.xml
    enable_tests: true
    test_file_pattern: tests/TEST-*.xml
- name: Deploy DEV to Bluemix CF
  inputs:
  - type: job
    stage: Build
    job: Package-vets-service
    dir_name: null
  triggers:
  - type: stage
  jobs:
  - name: Deploy
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: "CF-App-spring-petclinic-vets-service"
    script: |-
      #!/bin/bash
      cf push "${CF_APP}" -p spring-petclinic-*.jar
- name: Build container image
  inputs:
  - type: job
    stage: Build
    job: Package-vets-service
    dir_name: null
  triggers:
  - type: stage
  jobs:
  - name: Build
    type: builder
    extension_id: ibm.devops.services.pipeline.container.builder
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
    COMMAND: "#!/bin/bash\n\n# PoC Code\nARTIFACT_NAME=$(ls spring-petclinic-*.jar)\n\n# The following\
      \ colors have been defined to help with presentation of logs: green, red, label_color,\
      \ no_color.  \nlog_and_echo \"$LABEL\" \"Starting build script\"\n\n# The IBM\
      \ Container BM Containers plug-in (cf ic), Git client (git), and IDS Inventory\
      \ CLI (ids-inv) have been installed.\n# Based on the organization and space\
      \ selected in the Job credentials are in place for both IBM Container Service\
      \ and IBM Bluemix \n#####################\n# Run unit tests    #\n#####################\n\
      log_and_echo \"$LABEL\" \"No unit tests cases have been checked in\"\n\n######################################\n\
      # Build Container via Dockerfile     #\n######################################\n\
      \n# REGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}\n# FULL_REPOSITORY_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${APPLICATION_VERSION}\n\
      # If you wish to receive slack notifications, set SLACK_WEBHOOK_PATH as a property\
      \ on the stage.\n\nif [ -f Dockerfile ]; then \n    log_and_echo \"$LABEL\"\
      \ \"Building ${FULL_REPOSITORY_NAME}\"\n    ${EXT_DIR}/utilities/sendMessage.sh\
      \ -l info -m \"New container build requested for ${FULL_REPOSITORY_NAME}\"\n\
      \    # build image\n    BUILD_COMMAND=\"\"\n    if [ \"${USE_CACHED_LAYERS}\"\
      \ == \"true\" ]; then \n        #PoC Code\n        #BUILD_COMMAND=\"build --pull\
      \ --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}\"\n        BUILD_COMMAND=\"build\
      \ --build-arg ARTIFACT_NAME=${ARTIFACT_NAME%.jar} --pull --tag ${FULL_REPOSITORY_NAME}\
      \ ${WORKSPACE}\"\n        ice_retry ${BUILD_COMMAND}\n        RESULT=$?\n  \
      \  else \n        #PoC Code\n        #BUILD_COMMAND=\"build --no-cache --tag\
      \ ${FULL_REPOSITORY_NAME} ${WORKSPACE}\"\n        BUILD_COMMAND=\"build --build-arg\
      \ ARTIFACT_NAME=${ARTIFACT_NAME%.jar} --no-cache --tag ${FULL_REPOSITORY_NAME}\
      \ ${WORKSPACE}\"\n        ice_retry ${BUILD_COMMAND}\n        RESULT=$?\n  \
      \  fi \n\n    if [ $RESULT -ne 0 ]; then\n        log_and_echo \"$ERROR\" \"\
      Error building image\"\n        ice_retry info \n        ice_retry images\n\
      \        ${EXT_DIR}/print_help.sh\n        ${EXT_DIR}/utilities/sendMessage.sh\
      \ -l bad -m \"Container build of ${FULL_REPOSITORY_NAME} failed. $(get_error_info)\"\
      \n        exit 1\n    else\n        log_and_echo \"$SUCCESSFUL\" \"Container\
      \ build of ${FULL_REPOSITORY_NAME} was successful\"\n        ${EXT_DIR}/utilities/sendMessage.sh\
      \ -l good -m \"Container build of ${FULL_REPOSITORY_NAME} was successful\"\n\
      \    fi  \nelse \n    log_and_echo \"$ERROR\" \"Dockerfile not found in project\"\
      \n    ${EXT_DIR}/utilities/sendMessage.sh -l bad -m \"Failed to get Dockerfile.\
      \ $(get_error_info)\"\n    exit 1\nfi  \n\n######################################################################################\n\
      # Copy any artifacts that will be needed for deployment and testing to $WORKSPACE\
      \    #\n######################################################################################\n\
      echo \"IMAGE_NAME=${FULL_REPOSITORY_NAME}\" >> $ARCHIVE_DIR/build.properties"
    IMAGE_NAME: image-spring-petclinic-vets-service
    USE_CACHED_LAYERS: 'true'
- name: Deploy to Test
  inputs:
  - type: job
    stage: Build container image
    job: Build
    dir_name: null
  triggers:
  - type: stage
  properties:
  - name: CMD
    value: java -Djava.security.egd=file:/dev/./urandom -jar /app.jar --server.port=8081
    type: text
  - name: ROUTE_HOSTNAME
    value: vets-service-container-test1
    type: text
  - name: ROUTE_DOMAIN
    value: mybluemix.net
    type: text
  - name: DESIRED_INSTANCES
    value: '1'
    type: text
  - name: LOGICAL_ENV_NAME
    value: TEST
    type: text
  - name: APP_URL
    value: ''
    type: text
  jobs:
  - name: Deploy to Bluemix container service
    type: deployer
    extension_id: ibm.devops.services.pipeline.docker.deploy.ice
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
    COMMAND: "#!/bin/bash\n# The following are some example deployment scripts.  Use\
      \ these as is or fork them and include your updates here:\necho -e \"${label_color}Starting\
      \ deployment script${no_color}\"\n\n\n# To view/fork this script goto: https://github.com/Osthanes/deployscripts\n\
      # git_retry will retry git calls to prevent pipeline failure on temporary github\
      \ problems\n# the code can be found in git_util.sh at https://github.com/Osthanes/container_deployer\n\
      #git_retry clone https://github.com/Osthanes/deployscripts.git deployscripts\n\
      git_retry clone https://github.com/sdevopsadm/deployscripts.git deployscripts\n\
      \n\n# You can deploy your Image as either a single Container or as a Container\
      \ \n# Group.  A Container Group deploys a number of containers to enhance\n\
      # scalability or reliability.  By default we will deploy as a single \n# container.\
      \  To switch to a group deploy, comment out the line below\n# containing deploycontainer.sh\
      \ and uncomment the line for deploygroup.sh\n\n# Deploy with containers:\n#\
      \ Optional environment properties (can be set directly in this script, or defined\
      \ as environment properties):\n#      NAME              Value         Description\n\
      #   =============      =========     ==============\n#   BIND_TO           \
      \  String       Specify a Bluemix application name that whose bound services\
      \ you wish to make available to the container.  By default this is not set.\n\
      #   CONTAINER_SIZE      String       Specify container size: pico (64), nano\
      \ (128), micro (256), tiny (512), small (1024), medium (2048),\n#          \
      \                                                  large (4096), x-large (8192),\
      \ 2x-large (16384).\n#                                    Default is micro (256).\n\
      #   CONCURRENT_VERSIONS Number       Number of versions of this container to\
      \ leave active.  \n#                                    Default is 1\n#\n#/bin/bash\
      \ deployscripts/deploycontainer.sh\n\n# Deploy Container Group:\n# Optional\
      \ environment properties (can be set directly in this script, or defined as\
      \ environment properties):\n#      NAME              Value         Description\n\
      #   =============      =========     ==============\n#   ROUTE_HOSTNAME    \
      \  String       Specify the Hostname for the Cloud Foundry Route you wish to\
      \ assign to this container group.  By default this is not set.\n#   ROUTE_DOMAIN\
      \        String       Specify domain name for the Cloud Foundry Route you wish\
      \ to assign to this container group.  By default this is not set.\n#   BIND_TO\
      \             String       Specify a Bluemix application name that whose bound\
      \ services you wish to make available to the container.  By default this is\
      \ not set.\n#   DESIRED_INSTANCES:  Number       Specify the number of instances\
      \ in the group.  Default value is 1.\n#   AUTO_RECOVERY:      Boolean      Set\
      \ auto-recovery to true/false.  Default value is false.\n\n#               \
      \                     Default is false.\n#   CONTAINER_SIZE      String    \
      \   Specify container size: pico (64), nano (128), micro (256), tiny (512),\
      \ small (1024), medium (2048),\n#                                          \
      \                  large (4096), x-large (8192), 2x-large (16384).\n#      \
      \                              Default is micro (256).\n#   CONCURRENT_VERSIONS\
      \ Number       Number of versions of this group to leave active.\n#        \
      \                            Default is 1\n# IF YOU WANT CONTAINER GROUPS ..\
      \ uncomment the next line, and comment out the previous deployment line (/bin/bash\
      \ deployscripts/deploygroup.sh)\n/bin/bash deployscripts/deploygroup.sh\n\n\
      RESULT=$?\n\n# source the deploy property file\nif [ -f \"${DEPLOY_PROPERTY_FILE}\"\
      \ ]; then\n  source \"$DEPLOY_PROPERTY_FILE\"\nfi\n\n#########################\n\
      # Environment DETAILS   #\n#########################\n# The environment has\
      \ been setup.\n# The Cloud Foundry CLI (cf), IBM Container Service CLI (ice),\
      \ Git client (git), IDS Inventory CLI (ids-inv) and Python 2.7.3 (python) have\
      \ been installed.\n# Based on the organization and space selected in the Job\
      \ credentials are in place for both IBM Container Service and IBM Bluemix\n\n\
      # The following colors have been defined to help with presentation of logs:\
      \ green, red, label_color, no_color.\nif [ $RESULT -ne 0 ]; then\n    echo -e\
      \ \"${red}Executed failed or had warnings ${no_color}\"\n    ${EXT_DIR}/print_help.sh\n\
      \    exit $RESULT\nfi\necho -e \"${green}Execution complete${no_label}\""
    PORT: '8081'
    CONTAINER_NAME: spring-petclinic-vets-service-201705
    DEPLOY_TYPE: red_black
